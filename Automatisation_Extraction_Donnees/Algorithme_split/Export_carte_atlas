"""
Model exported as python.
Name : Exportation atlas tous taxons v3
Group : 
With QGIS : 32808
"""

from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterVectorLayer
from qgis.core import QgsProcessingParameterRasterLayer
import processing


class ExportationAtlasTousTaxonsV3(QgsProcessingAlgorithm):

    def initAlgorithm(self, config=None):
        self.addParameter(QgsProcessingParameterVectorLayer('couche_de_couverture', 'Couche de couverture', types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_amphi', 'Couche dynamique amphi', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_amphi_2', 'Couche dynamique amphi 2 ', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_chiroptres', 'Couche dynamique chiroptères', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_coloptres', 'Couche dynamique coléoptères', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_coloptres_2', 'Couche dynamique coléoptères 2', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_htrocres', 'Couche dynamique hétérocères', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_htrocres_2', 'Couche dynamique hétérocères 2', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_mammif', 'Couche dynamique mammif', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_mammif_2', 'Couche dynamique mammif 2 ', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_odonates', 'Couche dynamique odonates', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_odonates_2', 'Couche dynamique odonates 2', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_oiseaux', 'Couche dynamique oiseaux', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_oiseaux_2', 'Couche dynamique oiseaux 2', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_orthoptres', 'Couche dynamique orthoptères', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_orthoptres_2', 'Couche dynamique orthoptères 2', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_reptiles', 'Couche dynamique reptiles', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_reptiles_2', 'Couche dynamique reptiles 2 ', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_rhopalocres', 'Couche dynamique rhopalocères', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('couche_dynamique_rhopalocres_2', 'Couche dynamique rhopalocères 2', optional=True, types=[QgsProcessing.TypeVectorAnyGeometry], defaultValue=None))
        self.addParameter(QgsProcessingParameterRasterLayer('raster', 'Raster', defaultValue=None))

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(44, model_feedback)
        results = {}
        outputs = {}

        # Activer la couche mammif patri
        alg_params = {
            'COUCHE_DYNAMIQUE': parameters['couche_dynamique_mammif'],
            'COUCHE_PERMANENTE_RASTER': parameters['raster'],
            'COUCHE_PERMANENTE_VECTEUR': parameters['couche_de_couverture']
        }
        outputs['ActiverLaCoucheMammifPatri'] = processing.run('script:activer_couche', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle mammif
        alg_params = {
        }
        outputs['BrancheConditionnelleMammif'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(2)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle mammif 2 
        alg_params = {
        }
        outputs['BrancheConditionnelleMammif2'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(3)
        if feedback.isCanceled():
            return {}

        # Exporter l'Atlas au format image mammif patri
        alg_params = {
            'ANTIALIAS': True,
            'COVERAGE_LAYER': parameters['couche_de_couverture'],
            'DPI': None,
            'EXTENSION': 8,  # png
            'FILENAME_EXPRESSION': "'Localisation des espèces de mammifères patrimoniaux'||@atlas_featurenumber",
            'FILTER_EXPRESSION': '',
            'FOLDER': 'C:\\Users\\lored\\Documents',
            'GEOREFERENCE': True,
            'INCLUDE_METADATA': True,
            'LAYERS': None,
            'LAYOUT': 'Modèle_mammif_patrimoniaux',
            'SORTBY_EXPRESSION': '',
            'SORTBY_REVERSE': False
        }
        outputs['ExporterLatlasAuFormatImageMammifPatri'] = processing.run('native:atlaslayouttoimage', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(4)
        if feedback.isCanceled():
            return {}

        # Activer la couche oiseaux patri
        alg_params = {
            'COUCHE_DYNAMIQUE': parameters['couche_dynamique_oiseaux'],
            'COUCHE_PERMANENTE_RASTER': parameters['raster'],
            'COUCHE_PERMANENTE_VECTEUR': parameters['couche_de_couverture']
        }
        outputs['ActiverLaCoucheOiseauxPatri'] = processing.run('script:activer_couche', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(5)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle oiseaux
        alg_params = {
        }
        outputs['BrancheConditionnelleOiseaux'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(6)
        if feedback.isCanceled():
            return {}

        # Exporter l'Atlas au format image oiseaux patri
        alg_params = {
            'ANTIALIAS': True,
            'COVERAGE_LAYER': parameters['couche_de_couverture'],
            'DPI': None,
            'EXTENSION': 8,  # png
            'FILENAME_EXPRESSION': "'Localisation des espèces doiseaux patrimoniaux'||@atlas_featurenumber",
            'FILTER_EXPRESSION': '',
            'FOLDER': 'C:\\Users\\lored\\Documents',
            'GEOREFERENCE': True,
            'INCLUDE_METADATA': True,
            'LAYERS': None,
            'LAYOUT': 'Modèle_oiseaux_patrimoniaux',
            'SORTBY_EXPRESSION': '',
            'SORTBY_REVERSE': False
        }
        outputs['ExporterLatlasAuFormatImageOiseauxPatri'] = processing.run('native:atlaslayouttoimage', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(7)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle oiseaux 2 
        alg_params = {
        }
        outputs['BrancheConditionnelleOiseaux2'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(8)
        if feedback.isCanceled():
            return {}

        # Activer la couche reptiles patri
        alg_params = {
            'COUCHE_DYNAMIQUE': parameters['couche_dynamique_reptiles'],
            'COUCHE_PERMANENTE_RASTER': parameters['raster'],
            'COUCHE_PERMANENTE_VECTEUR': parameters['couche_de_couverture']
        }
        outputs['ActiverLaCoucheReptilesPatri'] = processing.run('script:activer_couche', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(9)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle reptiles 2 
        alg_params = {
        }
        outputs['BrancheConditionnelleReptiles2'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(10)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle reptiles
        alg_params = {
        }
        outputs['BrancheConditionnelleReptiles'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(11)
        if feedback.isCanceled():
            return {}

        # Exporter l'Atlas au format image reptiles patri
        alg_params = {
            'ANTIALIAS': True,
            'COVERAGE_LAYER': parameters['couche_de_couverture'],
            'DPI': None,
            'EXTENSION': 8,  # png
            'FILENAME_EXPRESSION': "'Localisation des espèces de reptiles patrimoniaux'||@atlas_featurenumber",
            'FILTER_EXPRESSION': '',
            'FOLDER': 'C:\\Users\\lored\\Documents',
            'GEOREFERENCE': True,
            'INCLUDE_METADATA': True,
            'LAYERS': None,
            'LAYOUT': 'Modèle_reptiles_patrimoniaux',
            'SORTBY_EXPRESSION': '',
            'SORTBY_REVERSE': False
        }
        outputs['ExporterLatlasAuFormatImageReptilesPatri'] = processing.run('native:atlaslayouttoimage', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(12)
        if feedback.isCanceled():
            return {}

        # Activer la couche amphi patri
        alg_params = {
            'COUCHE_DYNAMIQUE': parameters['couche_dynamique_amphi'],
            'COUCHE_PERMANENTE_RASTER': parameters['raster'],
            'COUCHE_PERMANENTE_VECTEUR': parameters['couche_de_couverture']
        }
        outputs['ActiverLaCoucheAmphiPatri'] = processing.run('script:activer_couche', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(13)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle amphi
        alg_params = {
        }
        outputs['BrancheConditionnelleAmphi'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(14)
        if feedback.isCanceled():
            return {}

        # Exporter l'Atlas au format image amphi patri
        alg_params = {
            'ANTIALIAS': True,
            'COVERAGE_LAYER': parameters['couche_de_couverture'],
            'DPI': None,
            'EXTENSION': 8,  # png
            'FILENAME_EXPRESSION': "'Localisation des espèces damphibiens patrimoniaux'||@atlas_featurenumber",
            'FILTER_EXPRESSION': '',
            'FOLDER': 'C:\\Users\\lored\\Documents',
            'GEOREFERENCE': True,
            'INCLUDE_METADATA': True,
            'LAYERS': None,
            'LAYOUT': 'Modèle_amphi_patrimoniaux',
            'SORTBY_EXPRESSION': '',
            'SORTBY_REVERSE': False
        }
        outputs['ExporterLatlasAuFormatImageAmphiPatri'] = processing.run('native:atlaslayouttoimage', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(15)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle amphi 2
        alg_params = {
        }
        outputs['BrancheConditionnelleAmphi2'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(16)
        if feedback.isCanceled():
            return {}

        # Activer la couche v2 insectes patri
        alg_params = {
            'COUCHE_DYNAMIQUE': parameters['couche_dynamique_coloptres'],
            'COUCHE_DYNAMIQUE2': parameters['couche_dynamique_odonates'],
            'COUCHE_DYNAMIQUE3': parameters['couche_dynamique_orthoptres'],
            'COUCHE_DYNAMIQUE4': parameters['couche_dynamique_rhopalocres'],
            'COUCHE_DYNAMIQUE5': parameters['couche_dynamique_htrocres'],
            'COUCHE_PERMANENTE_RASTER': parameters['raster'],
            'COUCHE_PERMANENTE_VECTEUR': parameters['couche_de_couverture']
        }
        outputs['ActiverLaCoucheV2InsectesPatri'] = processing.run('script:activer_couche_v2', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(17)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle Insectes
        alg_params = {
        }
        outputs['BrancheConditionnelleInsectes'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(18)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle Insectes 2
        alg_params = {
        }
        outputs['BrancheConditionnelleInsectes2'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(19)
        if feedback.isCanceled():
            return {}

        # Exporter l'Atlas au format image insectes patri
        alg_params = {
            'ANTIALIAS': True,
            'COVERAGE_LAYER': parameters['couche_de_couverture'],
            'DPI': None,
            'EXTENSION': 8,  # png
            'FILENAME_EXPRESSION': "'Localisation des espèces dinsectes patrimoniaux'||@atlas_featurenumber",
            'FILTER_EXPRESSION': '',
            'FOLDER': 'C:\\Users\\lored\\Documents',
            'GEOREFERENCE': True,
            'INCLUDE_METADATA': True,
            'LAYERS': None,
            'LAYOUT': 'Modèle_insectes_patrimoniaux',
            'SORTBY_EXPRESSION': '',
            'SORTBY_REVERSE': False
        }
        outputs['ExporterLatlasAuFormatImageInsectesPatri'] = processing.run('native:atlaslayouttoimage', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(20)
        if feedback.isCanceled():
            return {}

        # Activer la couche chiroptères
        alg_params = {
            'COUCHE_DYNAMIQUE': parameters['couche_dynamique_chiroptres'],
            'COUCHE_PERMANENTE_RASTER': parameters['raster'],
            'COUCHE_PERMANENTE_VECTEUR': parameters['couche_de_couverture']
        }
        outputs['ActiverLaCoucheChiroptres'] = processing.run('script:activer_couche', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(21)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle chiroptères
        alg_params = {
        }
        outputs['BrancheConditionnelleChiroptres'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(22)
        if feedback.isCanceled():
            return {}

        # Exporter l'Atlas au format image chiroptères
        alg_params = {
            'ANTIALIAS': True,
            'COVERAGE_LAYER': parameters['couche_de_couverture'],
            'DPI': None,
            'EXTENSION': 8,  # png
            'FILENAME_EXPRESSION': "'Localisation des espèces de chauves-souris'||@atlas_featurenumber",
            'FILTER_EXPRESSION': '',
            'FOLDER': 'C:\\Users\\lored\\Documents',
            'GEOREFERENCE': True,
            'INCLUDE_METADATA': True,
            'LAYERS': None,
            'LAYOUT': 'Modèle_chiroptères',
            'SORTBY_EXPRESSION': '',
            'SORTBY_REVERSE': False
        }
        outputs['ExporterLatlasAuFormatImageChiroptres'] = processing.run('native:atlaslayouttoimage', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(23)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle chiroptères 2
        alg_params = {
        }
        outputs['BrancheConditionnelleChiroptres2'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(24)
        if feedback.isCanceled():
            return {}

        # Activer la couche mammif 
        alg_params = {
            'COUCHE_DYNAMIQUE': parameters['couche_dynamique_mammif_2'],
            'COUCHE_PERMANENTE_RASTER': parameters['raster'],
            'COUCHE_PERMANENTE_VECTEUR': parameters['couche_de_couverture']
        }
        outputs['ActiverLaCoucheMammif'] = processing.run('script:activer_couche', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(25)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle mammif 3
        alg_params = {
        }
        outputs['BrancheConditionnelleMammif3'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(26)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle mammif 4
        alg_params = {
        }
        outputs['BrancheConditionnelleMammif4'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(27)
        if feedback.isCanceled():
            return {}

        # Exporter l'Atlas au format image données mammif
        alg_params = {
            'ANTIALIAS': True,
            'COVERAGE_LAYER': parameters['couche_de_couverture'],
            'DPI': None,
            'EXTENSION': 8,  # png
            'FILENAME_EXPRESSION': "'Localisation des données de mammifères'||@atlas_featurenumber",
            'FILTER_EXPRESSION': '',
            'FOLDER': 'C:\\Users\\lored\\Documents',
            'GEOREFERENCE': True,
            'INCLUDE_METADATA': True,
            'LAYERS': None,
            'LAYOUT': 'Modèle_mammif',
            'SORTBY_EXPRESSION': '',
            'SORTBY_REVERSE': False
        }
        outputs['ExporterLatlasAuFormatImageDonnesMammif'] = processing.run('native:atlaslayouttoimage', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(28)
        if feedback.isCanceled():
            return {}

        # Activer la couche oiseaux
        alg_params = {
            'COUCHE_DYNAMIQUE': parameters['couche_dynamique_oiseaux_2'],
            'COUCHE_PERMANENTE_RASTER': parameters['raster'],
            'COUCHE_PERMANENTE_VECTEUR': parameters['couche_de_couverture']
        }
        outputs['ActiverLaCoucheOiseaux'] = processing.run('script:activer_couche', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(29)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle oiseaux 4
        alg_params = {
        }
        outputs['BrancheConditionnelleOiseaux4'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(30)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle oiseaux 3
        alg_params = {
        }
        outputs['BrancheConditionnelleOiseaux3'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(31)
        if feedback.isCanceled():
            return {}

        # Exporter l'Atlas au format image données oiseaux
        alg_params = {
            'ANTIALIAS': True,
            'COVERAGE_LAYER': parameters['couche_de_couverture'],
            'DPI': None,
            'EXTENSION': 8,  # png
            'FILENAME_EXPRESSION': "'Localisation des données doiseaux'||@atlas_featurenumber",
            'FILTER_EXPRESSION': '',
            'FOLDER': 'C:\\Users\\lored\\Documents',
            'GEOREFERENCE': True,
            'INCLUDE_METADATA': True,
            'LAYERS': None,
            'LAYOUT': 'Modèle_oiseaux',
            'SORTBY_EXPRESSION': '',
            'SORTBY_REVERSE': False
        }
        outputs['ExporterLatlasAuFormatImageDonnesOiseaux'] = processing.run('native:atlaslayouttoimage', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(32)
        if feedback.isCanceled():
            return {}

        # Activer la couche reptiles
        alg_params = {
            'COUCHE_DYNAMIQUE': parameters['couche_dynamique_reptiles_2'],
            'COUCHE_PERMANENTE_RASTER': parameters['raster'],
            'COUCHE_PERMANENTE_VECTEUR': parameters['couche_de_couverture']
        }
        outputs['ActiverLaCoucheReptiles'] = processing.run('script:activer_couche', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(33)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle reptiles 4
        alg_params = {
        }
        outputs['BrancheConditionnelleReptiles4'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(34)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle reptiles 3 
        alg_params = {
        }
        outputs['BrancheConditionnelleReptiles3'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(35)
        if feedback.isCanceled():
            return {}

        # Exporter l'Atlas au format image données reptiles
        alg_params = {
            'ANTIALIAS': True,
            'COVERAGE_LAYER': parameters['couche_de_couverture'],
            'DPI': None,
            'EXTENSION': 8,  # png
            'FILENAME_EXPRESSION': "'Localisation des données de reptiles'||@atlas_featurenumber",
            'FILTER_EXPRESSION': '',
            'FOLDER': 'C:\\Users\\lored\\Documents',
            'GEOREFERENCE': True,
            'INCLUDE_METADATA': True,
            'LAYERS': None,
            'LAYOUT': 'Modèle_reptiles',
            'SORTBY_EXPRESSION': '',
            'SORTBY_REVERSE': False
        }
        outputs['ExporterLatlasAuFormatImageDonnesReptiles'] = processing.run('native:atlaslayouttoimage', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(36)
        if feedback.isCanceled():
            return {}

        # Activer la couche amphi
        alg_params = {
            'COUCHE_DYNAMIQUE': parameters['couche_dynamique_amphi_2'],
            'COUCHE_PERMANENTE_RASTER': parameters['raster'],
            'COUCHE_PERMANENTE_VECTEUR': parameters['couche_de_couverture']
        }
        outputs['ActiverLaCoucheAmphi'] = processing.run('script:activer_couche', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(37)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle amphibiens 3
        alg_params = {
        }
        outputs['BrancheConditionnelleAmphibiens3'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(38)
        if feedback.isCanceled():
            return {}

        # Exporter l'Atlas au format image données amphi
        alg_params = {
            'ANTIALIAS': True,
            'COVERAGE_LAYER': parameters['couche_de_couverture'],
            'DPI': None,
            'EXTENSION': 8,  # png
            'FILENAME_EXPRESSION': "'Localisation des données damphibiens'||@atlas_featurenumber",
            'FILTER_EXPRESSION': '',
            'FOLDER': 'C:\\Users\\lored\\Documents',
            'GEOREFERENCE': True,
            'INCLUDE_METADATA': True,
            'LAYERS': None,
            'LAYOUT': 'Modèle_amphi',
            'SORTBY_EXPRESSION': '',
            'SORTBY_REVERSE': False
        }
        outputs['ExporterLatlasAuFormatImageDonnesAmphi'] = processing.run('native:atlaslayouttoimage', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(39)
        if feedback.isCanceled():
            return {}

        # Activer la couche v2 insectes 
        alg_params = {
            'COUCHE_DYNAMIQUE': parameters['couche_dynamique_coloptres_2'],
            'COUCHE_DYNAMIQUE2': parameters['couche_dynamique_odonates_2'],
            'COUCHE_DYNAMIQUE3': parameters['couche_dynamique_orthoptres_2'],
            'COUCHE_DYNAMIQUE4': parameters['couche_dynamique_rhopalocres_2'],
            'COUCHE_DYNAMIQUE5': parameters['couche_dynamique_htrocres_2'],
            'COUCHE_PERMANENTE_RASTER': parameters['raster'],
            'COUCHE_PERMANENTE_VECTEUR': parameters['couche_de_couverture']
        }
        outputs['ActiverLaCoucheV2Insectes'] = processing.run('script:activer_couche_v2', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(40)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle amphibiens 4
        alg_params = {
        }
        outputs['BrancheConditionnelleAmphibiens4'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(41)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle Insectes 4
        alg_params = {
        }
        outputs['BrancheConditionnelleInsectes4'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(42)
        if feedback.isCanceled():
            return {}

        # Branche conditionnelle Insectes 3
        alg_params = {
        }
        outputs['BrancheConditionnelleInsectes3'] = processing.run('native:condition', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        feedback.setCurrentStep(43)
        if feedback.isCanceled():
            return {}

        # Exporter l'Atlas au format image insectes
        alg_params = {
            'ANTIALIAS': True,
            'COVERAGE_LAYER': parameters['couche_de_couverture'],
            'DPI': None,
            'EXTENSION': 8,  # png
            'FILENAME_EXPRESSION': "'Localisation des données dinsectes'||@atlas_featurenumber",
            'FILTER_EXPRESSION': '',
            'FOLDER': 'C:\\Users\\lored\\Documents',
            'GEOREFERENCE': True,
            'INCLUDE_METADATA': True,
            'LAYERS': None,
            'LAYOUT': 'Modèle_insectes',
            'SORTBY_EXPRESSION': '',
            'SORTBY_REVERSE': False
        }
        outputs['ExporterLatlasAuFormatImageInsectes'] = processing.run('native:atlaslayouttoimage', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        return results

    def name(self):
        return 'Exportation atlas tous taxons v3'

    def displayName(self):
        return 'Exportation atlas tous taxons v3'

    def group(self):
        return ''

    def groupId(self):
        return ''

    def createInstance(self):
        return ExportationAtlasTousTaxonsV3()
